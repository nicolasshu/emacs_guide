* Prerequisites
** Notes
For this guide, for the purposes of rendering the code block parameters, when showing examples of code blocks, instead of using =#+BEGIN_SRC=, we will use =\#+BEGIN_SRC=
** Executing Blocks
In order to run the code blocks below in your system, you can use =org-ctrl-c-ctrl-c= (=C-c C-c= or =, ,= in Spacemacs). This will create a =RESULTS= block underneath it showing the result. For example:

#+begin_src org
,#+begin_src elisp :tangle yes
(setq x 10)
,#+end_src
#+end_src

#+BEGIN_SRC org
#+RESULTS:
: 10
#+END_SRC
** Tangling
You may use =org-babel-tangle= (=C-c C-v t= or =, b t= in Spacemacs) in order to export your code blocks into a file. There are two ways to do so:

*** Export Everything into Same Filename
Assume you are working on a file names =filename.org=. In order to export all of the same type blocks into a single file =filename.ext=, you may add the arguments =:tangle yes= to each of the code blocks you wish to output. For example:

#+begin_src org
,#+begin_src elisp :tangle yes
(setq x 10)
,#+end_src
#+end_src

Note that if you have multiple types of codeblocks, for example a Javascript, a Python, a Elisp, and run =org-babel-tangle=, it will output files for each of those extensions:
  - =filename.js=
  - =filename.py=
  - =filename.el=

*** Export Individual Blocks into Separate Files
In order to set individual code blocks to be tangled into specific files, add the argument =:tangle filename.ext= to the code block definition. For example:

#+begin_src org
,#+begin_src python :tangle my_python.py
x = 10
,#+end_src
#+end_src

#+begin_src org
\#+begin_src python :tangle my_elisp.el
(setq x 10)
\#+end_src
#+end_src
* Messages
In order to output a log, you can use =message=. 
? Does it always expect strings?

#+begin_src elisp
(message "Hello, %s!" "Nick")
#+end_src

#+RESULTS:
: Hello, Nick!

* Variables
To set up variables, we can use =setq=.

#+begin_src elisp :tangle yes
(setq x 10)
#+end_src

#+RESULTS:
: 10

You can assign multiple variables at once as well
#+begin_src elisp
(setq y 20 z 30)
#+end_src

#+begin_src elisp
(setq my-list '(1 2 3 4))
#+end_src

Because of the whitespace requirement as separators, it gives you flexibility for different readabilities. E.g.,

#+begin_src elisp
(setq my-list '(1
                2
                3
                4))
#+end_src

Lists are inherently Cons Cells. See [[*Cons Cells]]

In order to obtain the nth value of a list, you can use =nth=.

#+begin_src elisp
(setq my-list '("a" "b" "c" "d" "e"))
(nth 2 my-list)
#+end_src

#+RESULTS:
: c

* Let
The statement =let= differs from =setq= in a way that =let= creates local variables within a scope, whereas =setq= creates global variables. For example,

#+begin_src elisp
(let ((x 10) (y 20))
  (message "x=%d and y=%d" x y))
#+end_src

#+RESULTS:
: x=10 and y=20

Note how we are setting the variables inside a nested parenthesis. This is because =let= expects a *list of bindings* to be provided as the first argument, and each of the binding must be in form of a *pair*, where the 1st element is the variable and the 2nd element is the value. Therefore, the correct syntax for =let= is:

#+begin_src elisp
(let ((var1 value1)
      (var2 value2))
  ;; body of code
)
#+end_src

You can also create lists. Lists are *always* separated by whitespaces. Note in the example below that there is a ='= in front of the list. This is a shorthand for =quote=, to interpret the following input as a literal value. Otherwise, it would try to run the function =1=, which does not exist. Commas are not valid separators in Lisp languages.

* Cons Cells
TODO: Establish what Cons Cells are.
Cons cells are a fundamental data structure that represent pairs of values. They are essentially used to build lists, pairs, and other more complex data structure. A *cons cell* is a pair of two objects, which are often referred to as *car* and *cdr*. The first value is stored in the *car* (aka head or first), and the second value is stored in the *cdr* (aka tail or rest). A cons cell is created using the =cons= function, which takes two args and returns a pair (i.e., a cons cell)

#+begin_src elisp
(cons "a" 2)
#+end_src

#+RESULTS:
: (a . 2)

This means that you can obtain the car or the cdr of the cons cell

#+begin_src emacs-lisp
(setq my-cons (cons 1 2))
(message "The car of the cons is %s and the cdr of the cons is %s" (car my-cons) (cdr my-cons))
#+end_src

#+RESULTS:
: The car of the cons is 1 and the cdr of the cons is 2

So, lists in fact are chains of cons cells. For example, a list =(1 2 3)= is represented as below. For this reason, the =car= and =cdr= of the list are:

#+begin_src elisp
(setq my-list (cons 1 (cons 2 (cons 3 nil))))
(message "The car of the list is %s and the cdr of the list is %s" (car my-list) (cdr my-list))
#+end_src

#+RESULTS:
: The car of the list is 1 and the cdr of the list is (2 3)

Associative lists (alists): An alist is a list of cons cells, where each cons cell represents a key-value pair. It's commonly used for simple mappings.

#+begin_src elisp
(setq alist '((name . "John") (age . 30)))
(cdr (assoc 'name alist))  ;; Returns "John"
#+end_src

#+RESULTS:
: John


* Functions
You can define functions with =defun=.
#+begin_src elisp
(defun my_func (arg)
  "This function prints a string showing the argument passed in"
  (message "The argument passed in was %s!" arg)
)
(my_func 1)
#+end_src

#+RESULTS:
: The argument passed in was 1!

You can pass in multiple arguments at once:
#+begin_src elisp
(defun addNums (x y)
  (message "%f + %f = %f" x y (+ x y))
)
(addNums 7 9)
#+end_src

#+RESULTS:
: 7.000000 + 9.000000 = 16.000000

In order to return values themselves, you may simply return it as the code itself.
#+begin_src elisp
(defun addNums (a b)
  ;    list          list
  ;    v             v
  (let ((sum (+ a b)))
  ;     ^           ^
  ;     pair      pair
    sum
   )
)
(addNums 2 3)
#+end_src

#+RESULTS:
: 5

you may simply return the values using =list=. This turn around, note how we will use the =let= statement in order to create local variables.

#+begin_src elisp
(defun add-multiply (a b)
  (let ((sum (+ a b))
        (product (* a b))
       )
    (list sum product)
   )
)
(add-multiply 2 3)
#+end_src

#+RESULTS:
| 5 | 6 |

If you wish to use optional arguments, you will need to use =&optional= as a separator to separate the required arguments first from the optional arguments. Then, you can use =or= inside the function to assign default values to the optional arguments in case they are not provided.

#+begin_src elisp
(defun add_or_multiply (a b &optional return_sum dummy)
  (let ((sum (+ a b))                    ; Compute the sum a+b
        (prod (* a b))                   ; Compute the product a+b
        (return_sum (or return_sum t))   ; Boolean to return sum. By default, t (true)
        (dummy (or dummy nil))            ; Boolean for nothing. By default, nil (false)
        )
    (message "The dummy variable is %s" dummy)
    (if return_sum
        sum
        prod
        )
    )

)
; TODO: Fix this
(add_or_multiply 2 3 nil)
#+end_src

#+RESULTS:
: 5

* Conditional Statements
** =when= statement
A =when= statement is effectively a =if= statement but without an =else= statement. They behave the same if there is not else given.

#+begin_src elisp
(when condition
  then-branch
  )
#+end_src

** =if= statement
For conditional statements, you may use global variables, and return based on a conditional. For =if= statements, the syntax is shown below. The =else-branch= is actually optional, and if it is not given, then it behaves as a =when= statement.
#+begin_src elisp
(if condition
    then-branch
  else-branch)
#+end_src

Therefore, as an example, you can do:

#+begin_src elisp
(setq x 10)
(if (>= x 5)
    t
)
#+end_src

#+RESULTS:
: t

By passing 2 values to the =if= statement, you get an =if= statement. By passing 3 values, you, get an =if/else= statement.
#+begin_src elisp
(if t
    (message "This is t (true)")
    (message "This is nil (false)")
)
#+end_src

#+RESULTS:
: This is t (true)

** =cond= statement
The =cond= statement is helpful to deal with multiple conditions. In the example below, the last condition is a true statement =t=. This works as a catch-all that matches if no other previous condition is true.

#+begin_src elisp
(cond
 (condition1 result1)
 (condition2 result2)
 (condition3 result3)
 (t default-result)
)
#+end_src

As an example,
#+begin_src elisp
(setq x 10)
(cond
  ((> x 15) (message "x is greater than 15"))
  ((> x 5) (message "x is greater than 5"))
  ((> x 0) (message "x is positive"))
  (t (message "x is non-positive")))
#+end_src

#+RESULTS:
: x is greater than 5

** =unless= statement
The =unless= statement is the opposite of =when=. You may think of it as an =if-not= statement. So you can set it as:

#+begin_src elisp
(setq x 3)
(unless (> x 5)
  (message "x is not greater than 5"))
#+end_src

#+RESULTS:
: x is not greater than 5

* Loops
** =while= Loop
The =while= loop is the most common.

#+begin_src elisp
(setq x 0)
(while (< x 5)
  (message "x = %d" x)
  (setq x (+ x 1))
)
#+end_src

#+RESULTS:
: x = 0
: x = 1
: x = 2
: x = 3
: x = 4

** =dotimes= Loop

The =dotimes= loop is specifically designed to running a block of code some given number of times. It's good to know in advance the number of iterations.

#+begin_src elisp
(dotimes (i 5)
  (message "i = %d" i)
)
#+end_src

#+RESULTS:
: i = 0
: i = 1
: i = 2
: i = 3
: i = 4

** =dolist= Loop

The =dolist= loop iterates through each element of a list.

#+begin_src elisp
(setq my-list '(10 20 30 40 50))
(dolist (x my-list)
  (message "x = %d" x)
)
#+end_src

#+RESULTS:
: x = 10
: x = 20
: x = 30
: x = 40
: x = 50

** =cl-loop= (More Advanced from =cl-lib=)

There's a more advanced and flexible =cl-loop= function. It can be used for a variety of tasks. Its syntax is

#+begin_src elisp
(loop for var in list do
      body)
#+end_src

An example is:

#+begin_src elisp
(loop for x in '(1 2 3 4 5) do
      (message "x is %d" x))
#+end_src

Another example is

#+begin_src elisp
(loop for i from 1 to 5
      summing i)
#+end_src

In order to use similar to Python's =enumerate=, you can do
#+begin_src elisp
(setq my-list '(a b c))
(dotimes (i (length my-list))
  (message "%d %s" i (nth i my-list))
)
#+end_src

#+RESULTS:
: 0 a
: 1 b
: 2 c

In order to use iterate through two lists at the same time, you may do

#+begin_src elisp
(setq my-list '(a b c))
(setq my-List '(A B C))
(dotimes (i (length my-list))
  (message "%d %s %s" i (nth i my-list) (nth i my-List))
)
#+end_src

#+RESULTS:
: 0 a A
: 1 b B
: 2 c C

** TODO: Break
** TODO: Continue
* Emacs Functions
Show integration with Emacs functions
** Anonymous Functions

#+begin_src elisp
(mapcar (lambda (x) (* x 2)) '(1 2 3 4 5))  ;; Doubles each element in the list
#+end_src

#+RESULTS:
| 2 | 4 | 6 | 8 | 10 |

* Interactive
By adding the term =(interactive)=, it allows your function to be interactive. This means, that it can be used via =M-x greet-user=. Below, =read-string= will ask for a value in the minibuffer. Now you can either execute (=C-c C-c= / =, ,= / =org-ctrl-c-ctrl-c=)

#+begin_src elisp
(defun greet-user ()
  "Ask for the user's name and greet them."
  (interactive)
  (let ((name (read-string "What is your name? ")))  ;; Prompt for name
    (message "Hello, %s!" name)))  ;; Greet the user by name
(greet-user)
#+end_src

#+RESULTS:
: Hello, Nick!

* More
** Text Manipulation Functions
=insert=: Inserts text at the point (cursor position).

#+begin_src elisp
(insert "Hello, world!")
#+end_src

=delete-char=: Deletes the character at the point (cursor position).

#+begin_src elisp
(delete-char 1)  ;; Delete one character to the right of the cursor
#+end_src

=delete-region=: Deletes the text between two points (regions).

#+begin_src elisp
(delete-region (point) (mark))  ;; Deletes the region between point and mark
#+end_src

=upcase-region=: Converts all the text in a region to uppercase.

#+begin_src elisp
(upcase-region (point) (mark))
#+end_src

=downcase-region=: Converts all the text in a region to lowercase.

#+begin_src elisp
(downcase-region (point) (mark))
#+end_src

=capitalize-region=: Capitalizes the first letter of each word in a region.

#+begin_src elisp
(capitalize-region (point) (mark))
#+end_src

=replace-regexp=: Replaces a regular expression match with a replacement string in a region.

#+begin_src elisp
(replace-regexp "foo" "bar")  ;; Replaces all occurrences of "foo" with "bar"
#+end_src

** Buffer and Window Management

=switch-to-buffer=: Switches to the specified buffer.

#+begin_src elisp
(switch-to-buffer "*scratch*")  ;; Switch to the *scratch* buffer
#+end_src

=get-buffer-create=: Returns an existing buffer or creates a new one.

#+begin_src elisp
(get-buffer-create "my-buffer")  ;; Creates a buffer named "my-buffer"
#+end_src

=kill-buffer=: Kills a buffer.

#+begin_src elisp
(kill-buffer "*scratch*")  ;; Kills the *scratch* buffer
#+end_src

=save-buffer=: Saves the current buffer to its associated file.

#+begin_src elisp
(save-buffer)  ;; Save the current buffer
#+end_src

=insert-file-contents=: Inserts the contents of a file into the current buffer.

#+begin_src elisp
(insert-file-contents "/path/to/file.txt")
#+end_src

=find-file=: Opens a file in a new buffer.

#+begin_src elisp
(find-file "/path/to/file.txt")
#+end_src

=split-window-right=: Splits the current window horizontally.

#+begin_src elisp
(split-window-right)
#+end_src

=delete-window=: Deletes the current window.

#+begin_src elisp
(delete-window)
#+end_src

** Cursor and Point Management

=point=: Returns the current position of the cursor (point).

#+begin_src elisp
(point)  ;; Returns the current point (position of the cursor)
#+end_src

=goto-char=: Moves the cursor (point) to the specified position.

#+begin_src elisp
(goto-char 10)  ;; Moves the point to position 10
#+end_src

=move-beginning-of-line=: Moves the cursor to the beginning of the current line.

#+begin_src elisp
(move-beginning-of-line 1)  ;; Moves the cursor to the start of the line
#+end_src

=move-end-of-line=: Moves the cursor to the end of the current line.

#+begin_src elisp
(move-end-of-line 1)  ;; Moves the cursor to the end of the line
#+end_src

=forward-char=: Moves the cursor forward by a specified number of characters.

#+begin_src elisp
(forward-char 1)  ;; Moves the point one character forward
#+end_src

=backward-char=: Moves the cursor backward by a specified number of characters.

#+begin_src elisp
(backward-char 1)  ;; Moves the point one character backward
#+end_src

=beginning-of-buffer=: Moves the cursor to the beginning of the buffer.

#+begin_src elisp
(beginning-of-buffer)
#+end_src

=end-of-buffer=: Moves the cursor to the end of the buffer.

#+begin_src elisp
(end-of-buffer)
#+end_src

** Working with Lists

=car=: Returns the first element of a list.

#+begin_src elisp
(car '(1 2 3))  ;; Returns 1
#+end_src

=cdr=: Returns the rest of the list (everything but the first element).

#+begin_src elisp
(cdr '(1 2 3))  ;; Returns (2 3)
#+end_src

=cons=: Creates a new pair (a cons cell) by prepending an element to a list.

#+begin_src elisp
(cons 0 '(1 2 3))  ;; Returns (0 1 2 3)
#+end_src

=list=: Creates a list from the arguments.

#+begin_src elisp
(list 1 2 3)  ;; Returns (1 2 3)
#+end_src

=length=: Returns the length of a list.

#+begin_src elisp
(length '(1 2 3))  ;; Returns 3
#+end_src

=member=: Checks if an element is a member of a list.

#+begin_src elisp
(member 2 '(1 2 3))  ;; Returns (2 3) because 2 is in the list
#+end_src

=append=: Appends two lists together.

#+begin_src elisp
(append '(1 2) '(3 4))  ;; Returns (1 2 3 4)
#+end_src

** Conditionals and Flow Control

=if=: Conditional expression.

#+begin_src elisp
(if (> 3 2) "Yes" "No")  ;; Returns "Yes"
#+end_src

=cond=: Multi-way conditional (like a series of if statements).

#+begin_src elisp
(cond
 ((> 3 2) "Yes")
 ((< 3 2) "No")
 (t "Maybe"))  ;; Returns "Yes"
#+end_src

=while=: While loop.

#+begin_src elisp
(setq i 0)
(while (< i 5)
  (setq i (+ i 1))
  (message "i is %d" i))  ;; Prints i from 0 to 4
#+end_src

=progn=: Evaluates multiple expressions sequentially.

#+begin_src elisp
(progn
  (message "First message")
  (message "Second message"))  ;; Prints two messages
#+end_src

=catch= and =throw=: Handle control flow with labels (like break or continue).

#+begin_src elisp
    (catch 'done
      (dotimes (i 10)
        (if (= i 5)
            (throw 'done "Loop finished early"))
        (message "i is %d" i)))
    ;; Prints i from 0 to 4 and then finishes early
#+end_src

** File I/O Functions

=write-file=: Writes the contents of the current buffer to a file.

#+begin_src elisp
(write-file "/path/to/file.txt")
#+end_src

=insert-file-contents=: Inserts the contents of a file into the current buffer.

#+begin_src elisp
(insert-file-contents "/path/to/file.txt")
#+end_src

=rename-file=: Renames a file.

#+begin_src elisp
(rename-file "/path/to/old-name.txt" "/path/to/new-name.txt")
#+end_src

=delete-file=: Deletes a file.

#+begin_src elisp
(delete-file "/path/to/file.txt")
#+end_src

** User Interface Functions

=message=: Displays a message in the minibuffer.

#+begin_src elisp
(message "Hello, Emacs!")
#+end_src

=read-string=: Prompts the user to enter a string.

#+begin_src elisp
(read-string "What is your name? ")
#+end_src

=read-number=: Prompts the user to enter a number.

#+begin_src elisp
(read-number "What is your age? ")
#+end_src

=completing-read=: Prompts the user with a list of possible completions.

#+begin_src elisp
(completing-read "Pick a fruit: " '("apple" "banana" "cherry"))
#+end_src
